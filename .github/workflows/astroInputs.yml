name: Deploy Astronomer Release Container

on:
  push:
    branches:
      - BRANCH-NAME
  workflow_dispatch:
    inputs:
      AppId:
        description: 'PlanIT application ID number, excludes APP- (ex. "4853")'
        required: true
        default: '0'
        type: string
      VpcId:
        description: 'VPC to provision the pipeline'
        required: true
        type: string
      RepositoryName:
        description: 'GitHub Enterprise repository name (ex. "HIG/ds_mlops_core_dags")'
        required: true
        type: string
      BranchName:
        description: 'GitHub Enterprise branch name'
        required: true
        type: string
      ReleaseName:
        description: 'Release Name Of Astro Deployment'
        required: true
        type: string
      AirflowVersion:
        description: 'Version tag of Airflow. For example 2.4.3-2'
        required: true
        type: string
      AirflowRepo:
        description: 'Airflow run type - OS or managed'
        required: true
        default: 'ap-airflow'
        type: string
        options:
          - ap-airflow
          - astro-runtime
      TimeoutAndRegion:
        description: 'JSON for TimeoutInMinutes and AWSRegion'
        required: true
        default: '{"AWSRegion":"us-west1","TimeoutInMinutes":10}'
        type: string
      DataClassification:
        description: 'Data classification for the application'
        required: true
        default: 'NonConfidential'
        type: string
        options:
          - NonConfidential
          - CompanyConfidential
          - HighlyRestricted
      StackNameSuffix:
        description: 'Optional suffix of the output stack name to become APP-AppId-StageName-StackNameSuffix; empty string will produce APP-AppId-StageName'
        required: false
        default: ''
        type: string


jobs:
  validate-inputs:
    runs-on: generic
    strategy:
      matrix:
        var: [AppId, VpcId, RepositoryName, BranchName, ReleaseName, AirflowVersion, TimeoutAndRegion]
    steps:
      - name: Validate Inputs
        run: |
          VALUE="${{ github.event.inputs[matrix.var] }}"
          if [[ -z "$VALUE" ]]; then
            echo "Error: ${{ matrix.var }} is required"
            exit 1
          fi
jobs:
  setup:
    runs-on: generic
    env:
      APP_ID: ${{ github.event.inputs.AppId }}
      VPC_ID: ${{ github.event.inputs.VpcId }}
      REPOSITORY_NAME: ${{ github.event.inputs.RepositoryName }}
      BRANCH_NAME: ${{ github.event.inputs.BranchName }}
      RELEASE_NAME: ${{ github.event.inputs.ReleaseName }}
      AIRFLOW_VERSION: ${{ github.event.inputs.AirflowVersion }}
      AIRFLOW_REPO: ${{ github.event.inputs.AirflowRepo }}
      AWS_REGION: ${{ github.event.inputs.AWSRegion }}
      TIMEOUT_IN_MINUTES: ${{ github.event.inputs.TimeoutInMinutes }}
      DATA_CLASSIFICATION: ${{ github.event.inputs.DataClassification }}
      STACK_NAME_SUFFIX: ${{ github.event.inputs.StackNameSuffix }}
    steps:
      - name: Print Inputs
        run: |
          echo "AppId: $APP_ID"
          echo "VpcId: $VPC_ID"
          echo "RepositoryName: $REPOSITORY_NAME"
          echo "BranchName: $BRANCH_NAME"
          echo "ReleaseName: $RELEASE_NAME"
          echo "AirflowVersion: $AIRFLOW_VERSION"
          echo "AirflowRepo: $AIRFLOW_REPO"
          echo "AWSRegion: $AWS_REGION"
          echo "TimeoutInMinutes: $TIMEOUT_IN_MINUTES"
          echo "DataClassification: $DATA_CLASSIFICATION"
          echo "StackNameSuffix: $STACK_NAME_SUFFIX"
