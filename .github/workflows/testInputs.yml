name: Deploy Release Container

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      AppId:
        description: 'PlanIT application ID number (ex. "4853")'
        required: true
        type: string
      VpcId:
        description: 'VPC to provision the pipeline'
        required: true
        type: string
      RepositoryName:
        description: 'GitHub Enterprise repository name (ex. "HIG/ds_mlops_core_dags")'
        required: true
        type: string
      BranchName:
        description: 'GitHub Enterprise branch name'
        required: true
        type: string
      ReleaseName:
        description: 'Release Name Of Astro Deployment'
        required: true
        type: string
      AirflowVersion:
        description: 'Version tag of Airflow (ex. 2.4.3-2)'
        required: true
        type: string
      TimeoutAndRegion:
        description: 'JSON for TimeoutInMinutes and AWSRegion'
        required: true
        default: '{"AWSRegion":"us-west1","TimeoutInMinutes":10}'
        type: string
      AWS_ACCOUNT_ID:
        description: 'Target AWS Account ID'
        required: true
        type: choice
        options:
        - 252898585127
        - 805528740914
        - 063345380468
        - 844127575310
        - 902854700762
        - 923397148186
        - 102443476650
      DataClassification:
        description: 'Data classification for the application'
        required: true
        default: 'NonConfidential'
        type: string
        options:
          - NonConfidential
          - CompanyConfidential
          - HighlyRestricted
      StackNameSuffix:
        description: 'Optional suffix of the output stack name to become APP-AppId-StageName-StackNameSuffix; empty string will produce APP-AppId-StageName'
        required: false
        default: ''
        type: string

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        var: [AppId, VpcId, RepositoryName, BranchName, ReleaseName, AirflowVersion, TimeoutAndRegion]
    steps:
      - name: Validate Inputs
        run: |
          VALUE="${{ github.event.inputs[matrix.var] }}"
          if [[ -z "$VALUE" ]]; then
            echo "Error: ${{ matrix.var }} is required"
            exit 1
          fi

      - name: Validate AWS Account and Release Name
        run: |
          AWS_ACCOUNT_ID="${{ github.event.inputs.AWS_ACCOUNT_ID }}"
          RELEASE_NAME="${{ github.event.inputs.ReleaseName }}"

          echo "AWS_ACCOUNT_ID: $AWS_ACCOUNT_ID"
          echo "RELEASE_NAME: $RELEASE_NAME"

          # Define allowed accounts and release names
          declare -A ACCOUNT_RELEASE_MAP
          ACCOUNT_RELEASE_MAP["252898585127"]="claims-dsc claims-preprod claims-prod"
          ACCOUNT_RELEASE_MAP["805528740914"]="pl-dsc pl-preprod pl-prod"
          ACCOUNT_RELEASE_MAP["063345380468"]="mlc-discovery mlc-preprod mlc-prod"
          ACCOUNT_RELEASE_MAP["844127575310"]="sc-discovery sc-preprod sc-prod"
          ACCOUNT_RELEASE_MAP["902854700762"]="ilab-discovery cmra-discovery cmra-prod ulm-discovery ulm-prod"
          ACCOUNT_RELEASE_MAP["923397148186"]="gb-discovery gb-preprod gb-prod"
          ACCOUNT_RELEASE_MAP["102443476650"]="gs-discovery gs-preprod gs-prod"

          # Check if AWS_ACCOUNT_ID is authorized
          if [[ ! -v ACCOUNT_RELEASE_MAP[$AWS_ACCOUNT_ID] ]]; then
            echo "ERROR: Account ID $AWS_ACCOUNT_ID is not authorized!"
            exit 1
          fi

          # Check if RELEASE_NAME is allowed for the given AWS_ACCOUNT_ID
          ALLOWED_RELEASES=${ACCOUNT_RELEASE_MAP[$AWS_ACCOUNT_ID]}
          if [[ ! " $ALLOWED_RELEASES " =~ " $RELEASE_NAME " ]]; then
            echo "ERROR: Release Name $RELEASE_NAME is not authorized for Account $AWS_ACCOUNT_ID!"
            exit 1
          fi

      - name: Check if StackNameSuffix is Set
        id: check_suffix
        run: |
          if [[ -z "${{ github.event.inputs.StackNameSuffix }}" ]]; then
            echo "HAS_STACK_NAME_SUFFIX=false" >> $GITHUB_ENV
          else
            echo "HAS_STACK_NAME_SUFFIX=true" >> $GITHUB_ENV
          fi

  setup:
    runs-on: ubuntu-latest
    needs: validate-inputs
    steps:
      - name: Parse Inputs
        id: parse_inputs
        run: |
          echo "APP_ID=${{ github.event.inputs.AppId }}" >> $GITHUB_ENV
          echo "VPC_ID=${{ github.event.inputs.VpcId }}" >> $GITHUB_ENV
          echo "REPOSITORY_NAME=${{ github.event.inputs.RepositoryName }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${{ github.event.inputs.BranchName }}" >> $GITHUB_ENV
          echo "RELEASE_NAME=${{ github.event.inputs.ReleaseName }}" >> $GITHUB_ENV
          echo "AIRFLOW_VERSION=${{ github.event.inputs.AirflowVersion }}" >> $GITHUB_ENV

          echo '${{ github.event.inputs.TimeoutAndRegion }}' > timeout_region.json
          cat timeout_region.json | jq .

          echo "AWS_REGION=$(jq -r '.AWSRegion' timeout_region.json)" >> $GITHUB_ENV
          echo "TIMEOUT_IN_MINUTES=$(jq -r '.TimeoutInMinutes' timeout_region.json)" >> $GITHUB_ENV

      - name: Set Secrets Dynamically
        run: |
          # Region-based Nexus Secrets mapping
          declare -A NEXUS_SECRETS=(
            ["us-east-1"]="arn:aws:secretsmanager:us-east-1:293176983353:secret:nexus-8ZgQUY"
            ["us-east-2"]="arn:aws:secretsmanager:us-east-2:293176983353:secret:nexus-dy4sJW"
            ["eu-west-2"]="arn:aws:secretsmanager:eu-west-2:293176983353:secret:nexus-n5867f"
          )

          NEXUS_SECRET="${NEXUS_SECRETS[$AWS_REGION]}"

          if [[ -z "$NEXUS_SECRET" ]]; then
            echo "Error: No Nexus Secret found for AWS Region: $AWS_REGION"
            exit 1
          fi

          echo "NEXUS_SECRET=$NEXUS_SECRET" >> $GITHUB_ENV

      - name: Set API Key based on Release Name
        run: |
          # Define Release-based API Key mapping
          declare -A API_KEYS=(
            ["gs-discovery"]="/HIG/astronomer/apikey/gs-api"
            ["gs-preprod"]="/HIG/astronomer/apikey/gs-api"
            ["gs-prod"]="/HIG/astronomer/apikey/gs-api"
            ["gb-discovery"]="/HIG/astronomer/apikey/gb-api"
            ["gb-preprod"]="/HIG/astronomer/apikey/gb-api"
            ["gb-prod"]="/HIG/astronomer/apikey/gb-api"
            ["pl-dsc"]="/HIG/astronomer/apikey/pl-api"
            ["pl-preprod"]="/HIG/astronomer/apikey/pl-api"
            ["pl-prod"]="/HIG/astronomer/apikey/pl-api"
            ["claims-dsc"]="/HIG/astronomer/apikey/claims-api"
            ["claims-preprod"]="/HIG/astronomer/apikey/claims-api"
            ["claims-prod"]="/HIG/astronomer/apikey/claims-api"
            ["sc-discovery"]="/HIG/astronomer/apikey/sc-api"
            ["sc-preprod"]="/HIG/astronomer/apikey/sc-api"
            ["sc-prod"]="/HIG/astronomer/apikey/sc-api"
            ["mlc-discovery"]="/HIG/astronomer/apikey/mlc-api"
            ["mlc-preprod"]="/HIG/astronomer/apikey/mlc-api"
            ["mlc-prod"]="/HIG/astronomer/apikey/mlc-api"
            ["ds-sandbox"]="/HIG/astronomer/apikey/sandbox-api"
            ["smm-discovery"]="/HIG/astronomer/apikey/dss-api"
            ["smm-prod"]="/HIG/astronomer/apikey/dss-api"
            ["ap-discovery"]="/HIG/astronomer/apikey/dss-api"
            ["ap-prod"]="/HIG/astronomer/apikey/dss-api"
            ["cmra-discovery"]="/HIG/astronomer/apikey/cmra-discovery-api"
            ["cmra-prod"]="/HIG/astronomer/apikey/cmra-prod-api"
            ["ilab-discovery"]="/HIG/astronomer/apikey/ilab-discovery-api"
            ["ulm-discovery"]="/HIG/astronomer/apikey/ulm-discovery-api"
            ["ulm-prod"]="/HIG/astronomer/apikey/ulm-prod-api"
            ["mlops-core-discover"]="/HIG/astronomer/apikey/mlops-core-api"
          )

          # Retrieve API Key based on ReleaseName
          API_KEY="${API_KEYS[$RELEASE_NAME]}"

          if [[ -z "$API_KEY" ]]; then
            echo "Error: No API key found for Release Name: $RELEASE_NAME"
            exit 1
          fi

          echo "API_KEY=$API_KEY" >> $GITHUB_ENV

      - name: Print Parsed Inputs
        run: |
          echo "AppId: $APP_ID"
          echo "VpcId: $VPC_ID"
          echo "RepositoryName: $REPOSITORY_NAME"
          echo "BranchName: $BRANCH_NAME"
          echo "ReleaseName: $RELEASE_NAME"
          echo "AirflowVersion: $AIRFLOW_VERSION"
          echo "AWSRegion: $AWS_REGION"
          echo "TimeoutInMinutes: $TIMEOUT_IN_MINUTES"
          echo "NexusSecret: $NEXUS_SECRET"
          echo "APIKey: $API_KEY"



